<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <properties resource="application.properties"></properties>
<!-- 	<context:annotation-config/> -->

<!-- 	<bean id="yamlProperties" class="org.springframework.beans.factory.config.YamlPropertiesFactoryBean"> -->
<!-- 	    <property name="resources" value="classpath:application.yml"/> -->
<!-- 	</bean> -->

<!-- 	<context:property-placeholder properties-ref="yamlProperties"/> -->


	<context id="testTables" targetRuntime="MyBatis3">
		<!-- 这里的type里写的是你的实现类的类全路径 -->

		<commentGenerator
			type="org.mybatis.generator.plugins.MyCommentGenerator">
			<property name="javaFileEncoding" value="UTF-8" />
            <property name="suppressDate" value="false"/>
			<!-- 是否去除自动生成的注释 true：是 ： false:否 -->
			<property name="suppressAllComments" value="false" />
		</commentGenerator>

		<!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
		<jdbcConnection driverClass="${spring.datasource.driver-class-name}"
			connectionURL="${spring.datasource.url}"
			userId="${spring.datasource.username}" password="${spring.datasource.password}">
				 <!--确保查的表只是指定的数据库中（避免出现重复创建）-->
				 <property name="nullCatalogMeansCurrent" value="true" />
		</jdbcConnection>

		<!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 
			和 NUMERIC 类型解析为java.math.BigDecimal -->
		<javaTypeResolver>
			<property name="forceBigDecimals" value="true" />
		</javaTypeResolver>

		<!-- targetProject:生成PO类的位置 -->
		<javaModelGenerator
			targetPackage="com.baizhi.entity.original"
			targetProject="./src/main/java">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
            <!-- 是否对modal添加构造函数 -->
            <property name="constructorBased" value="false"/>
            <!-- 是否清理从数据库中查询出的字符串左右两边的空白字符 -->
            <property name="trimStrings" value="false" />
            <!-- 建立modal对象是否不可改变 即生成的modal对象不会有setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>
		</javaModelGenerator>
		<!-- targetProject:mapper映射文件生成的位置 -->
		<!-- <sqlMapGenerator targetPackage="com.baizhi.mapper.original" targetProject="./src/main/resources"> -->
		<sqlMapGenerator
			targetPackage="com.baizhi.dao.original"
			targetProject="./src/main/java">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
		</sqlMapGenerator>
		<!-- targetPackage：mapper接口生成的位置 -->
		<javaClientGenerator type="XMLMAPPER"
			targetPackage="com.baizhi.dao.original"
			targetProject="./src/main/java">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
		</javaClientGenerator>

		<!-- 指定数据库表 -->
		<!-- <table schema="" tableName="tb_item" domainObjectName="Item"></table> 
			domainObjectName 可以配置生成的pojo名字 如不需要example类添加下面四个属性 enableCountByExample="false" 
			enableDeleteByExample="false" enableSelectByExample="false" enableUpdateByExample="false"></table> -->

		<!-- <table schema="" tableName="t_files" domainObjectName="TFiles" -->
		<!-- enableCountByExample="false" enableUpdateByExample="false" -->
		<!-- enableDeleteByExample="false" enableSelectByExample="false" -->
		<!-- selectByExampleQueryId="false"> -->
		<!-- 数据库表主键 -->
		<!-- <generatedKey column="id" sqlStatement="Mysql" -->
		<!-- identity="true" /> -->
		<!-- </table> -->
		<table tableName="uniqlo"></table>
		<table tableName="t_files"  domainObjectName="UserFile"></table>

		<!-- 有些表的字段需要指定java类型 <table schema="" tableName=""> <columnOverride column="" 
			javaType="" /> </table> -->
	</context>
</generatorConfiguration>
